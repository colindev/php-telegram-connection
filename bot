#!/usr/bin/env php
<?php

ini_set('error_reporting', 0);
require __DIR__.'/vendor/autoload.php';

set_error_handler(function(){
    echo "\e[31m";
    var_dump(func_get_args());
    echo "\e[m";
});

register_shutdown_function(function(){
    if ($err = error_get_last()) {
        echo "\e[31m";
        var_dump($err);
        echo "\e[m";
    }
});

set_exception_handler(function($e){
echo <<<EOF
\e[31m
{$e->getMessage()}
{$e->getFile()}:{$e->getLine()}
{$e->getTraceAsString()}
\e[m
EOF;
});

class Bots
{
    private $file;
    private $resource = array();
    function __construct()
    {
        $this->file = __DIR__.'/bots.json';
        ! is_file($this->file) and touch($this->file);
        $this->resource = json_decode(file_get_contents($this->file), true) ?: array();
    }

    function __destruct()
    {
        file_put_contents($this->file, json_encode($this->resource));
    }

    function find($bot)
    {
        $conn = null;
        if (preg_match('/^\d+:[-\w]+$/', $bot) &&  ! in_array($bot, $this->resource)) {
            $conn = new \Rde\Telegram\Connection($bot);
            $conn->me and $this->resource[$conn->me->{'username'}] = $bot;
        } elseif (isset($this->resource[$bot])) {
            $conn = new \Rde\Telegram\Connection($this->resource[$bot]);
        } elseif (in_array($bot, $this->resource)) {
            $conn = new \Rde\Telegram\Connection($bot);
        }
        
        return $conn;
    }
}

if (count($argv) < 2) {
    echo "\e[32m\tUsage: {$argv[0]} <token|bot-name> method [payload]\e[m", PHP_EOL;
    exit(1);
}

$opts = $argv;
$i = count($opts);
$verbose = false;
while ($i--) {
    if ('-vvv' == $opts[$i]) {
        $verbose = true;
        array_splice($opts, $i, 1);
    }
}

$bots = new Bots();
$conn = $bots->find($opts[1]);
$method = $opts[2];
$payload = isset($opts[3]) ? $opts[3] : null;
$timeout = 10;

if ( ! $conn) {
    echo "\e[31m找不到 bot\e[m";
    exit(1);
}
$http_method = getenv('METHOD');
if ($http_method && 'POST' === strtoupper($http_method)) {
    $conn->method($http_method);
}

$ret = print_r(call_user_func(array($conn->timeout($timeout), $method), $payload), true);

if ($verbose) {
    foreach ($conn->verbose as $line) {
        echo $line, PHP_EOL;
    }
}

echo PHP_EOL;
echo "\e[32m{$ret}\e[m";
echo PHP_EOL;

